#include "llvm/AOS/AOSReachTestPass.h"

char AOSReachTestPass::ID = 0;
static RegisterPass<AOSReachTestPass> X("aos-reach", "AOS reacheability test pass");

Pass *llvm::AOS::createAOSReachTestPass() { return new AOSReachTestPass(); }

bool AOSReachTestPass::runOnModule(Module &M) {
	bool function_modified = false;

	force_sign = true;

	errs() << "Start reachability test pass!\n";
  AOSMarkTaintPass &MT = getAnalysis<AOSMarkTaintPass>();
  value_map = MT.getValueMap();

  function_modified = handleGlobalVariables(M) || function_modified;

  function_modified = handleInstructions(M) || function_modified;

	errs() << "statNumGV: " << statNumGV << "\n";
	errs() << "statNumGVSigned: " << statNumGVSigned << "\n";
	errs() << "statNumAI: " << statNumAI << "\n";
	errs() << "statNumAISigned: " << statNumAISigned << "\n";
	errs() << "statNumCI: " << statNumCI << "\n";
	errs() << "statNumCISigned: " << statNumCISigned << "\n";

  return function_modified;
}

void AOSReachTestPass::getAnalysisUsage(AnalysisUsage &AU) const {
	AU.setPreservesAll();
  AU.addRequired<AOSMarkTaintPass> ();
}

bool AOSReachTestPass::handleGlobalVariables(Module &M) {
	bool function_modified = false;

	for (auto &G : M.getGlobalList()) {
		GlobalVariable *pGV = dyn_cast<GlobalVariable>(&G);
		Type *ty = pGV->getType()->getElementType();

		// Skip constant GV
		if (pGV->isConstant() || (!ty->isArrayTy() && !ty->isStructTy()))
			continue;

		statNumGV++;

    bool needSign = doReachabilityTest(pGV);

		if (needSign || force_sign) {
			gv_list.push_back(pGV);
			//handleGVAlloc(pF, pGV);

			//statNumGVSigned++;
		}
  }

	for (auto &F : M) {
		if (&F && F.getName() == "main") {
			while (!gv_list.empty()) {
				GlobalVariable *pGV = dyn_cast<GlobalVariable>(gv_list.front());
				gv_list.pop_front();

				if (!pGV->use_empty() && pGV->getType()->getElementType()->isArrayTy())
					handleGVAlloc(&F, pGV);
				statNumGVSigned++;
			}

			break;
		}
	}

	return function_modified;
}

bool AOSReachTestPass::handleInstructions(Module &M) {
  bool function_modified = false;

	for (auto &F : M) {
		for (auto &BB : F) {
			for (auto &I : BB) {
        switch(I.getOpcode()) {
          case Instruction::Alloca:
          {
            AllocaInst *pAI = dyn_cast<AllocaInst>(&I);
						Type *ty = pAI->getAllocatedType();

						// TODO handle StructTy
						//if (ty->isArrayTy() || ty->isStructTy()) {
						if (ty->isArrayTy()) {
							Function *pF = pAI->getFunction();

							statNumAI++;
							bool needSign = doReachabilityTest(pAI);

							if (needSign || force_sign) {
								pAI->setAlignment(16); // consider bounds compression
								statNumAISigned++;
                alloc_list.push_back(make_pair(pF, pAI));
								//function_modified = handleAlloc(pF, pAI) || function_modified;
							}
						}

            break;
          }
          case Instruction::Call:
          {
						CallInst *pCI = dyn_cast<CallInst>(&I);
            Function *pF = pCI->getCalledFunction();

            if (pF && (pF->getName() == "malloc" ||
                        pF->getName() == "_Znwm" /* new */ ||
                        pF->getName() == "_Znam" /* new[] */)) {
							statNumCI++;

							// TODO handle StructTy
					    bool needSign = doReachabilityTest(&I);

							if (needSign || force_sign) {
								statNumCISigned++;
                malloc_list.push_back(make_pair(pF, pCI));
								//function_modified = handleMalloc(pF, pCI) || function_modified;
							}
            } else if (pF && pF->getName() == "calloc") {
							statNumCI++;

							// TODO handle StructTy
					    bool needSign = doReachabilityTest(&I);

							if (needSign || force_sign) {
								statNumCISigned++;
                calloc_list.push_back(make_pair(pF, pCI));
								//function_modified = handleCalloc(pF, pCI) || function_modified;
							}
            } else if (pF && pF->getName() == "realloc") {
							statNumCI++;

							// TODO handle StructTy
					    bool needSign = doReachabilityTest(&I);

							if (needSign || force_sign) {
								statNumCISigned++;
                realloc_list.push_back(make_pair(pF, pCI));
								//function_modified = handleRealloc(pF, pCI) || function_modified;
							}
            } else if (pF && (pF->getName() == "free" ||
															pF->getName() == "_ZdlPv" ||
															pF->getName() == "_ZdaPv")) {
							//statNumCI++;
					    bool needSign = doReachabilityTest(pCI->getOperand(0));

							if (needSign || force_sign) {
								//statNumCISigned++;
                free_list.push_back(make_pair(pF, pCI));
								//function_modified = handleFree(pF, pCI) || function_modified;
							}
            }

            break;
          }
          default:
            break;
        }
      }
    }
  }

  while (!alloc_list.empty()) {
    pair<Function *, AllocaInst *> Pair = alloc_list.front();
    alloc_list.pop_front();

    Function *pF = Pair.first;
    AllocaInst *pAI = Pair.second;

		function_modified = handleAlloc(pF, pAI) || function_modified;
  }

  while (!malloc_list.empty()) {
    pair<Function *, CallInst *> Pair = malloc_list.front();
    malloc_list.pop_front();

    Function *pF = Pair.first;
    CallInst *pCI = Pair.second;

		function_modified = handleMalloc(pF, pCI) || function_modified;
  }

  while (!calloc_list.empty()) {
    pair<Function *, CallInst *> Pair = calloc_list.front();
    calloc_list.pop_front();

    Function *pF = Pair.first;
    CallInst *pCI = Pair.second;

		function_modified = handleCalloc(pF, pCI) || function_modified;
  }

  while (!realloc_list.empty()) {
    pair<Function *, CallInst *> Pair = realloc_list.front();
    realloc_list.pop_front();

    Function *pF = Pair.first;
    CallInst *pCI = Pair.second;

		function_modified = handleRealloc(pF, pCI) || function_modified;
  }

  while (!free_list.empty()) {
    pair<Function *, CallInst *> Pair = free_list.front();
    free_list.pop_front();

    Function *pF = Pair.first;
    CallInst *pCI = Pair.second;

		function_modified = handleFree(pF, pCI) || function_modified;
  }

	return function_modified;
}

bool AOSReachTestPass::doReachabilityTest(Value *pV) {
  list<AOSNode *> node_list;
  set<AOSNode *> visit_set;
	AOSNode *node = value_map[pV];

	if (node == nullptr)
		pV->dump();
	assert(node != nullptr);

	node_list.push_back(node);
  visit_set.insert(node);

  while (!node_list.empty()) {
    node = node_list.front();
    node_list.pop_front();

		if (node->isTainted()) {
			//if (visit_set.find(node) != visit_set.end()) {
			//	visit_set.insert(node);
			//	errs() << "Print tainted node!\n";
			//	printNode(node);
			//}
			return true;
		}

    for (auto it = node->children.begin(); it != node->children.end(); it++) {
      if (visit_set.find(*it) == visit_set.end()) {
        visit_set.insert(*it);
        node_list.push_back(*it);
      }
    }
  }

	return false;
}

bool AOSReachTestPass::handleAlloc(Function *pF, AllocaInst *pAI) {
	const DataLayout &DL = pF->getParent()->getDataLayout();
  auto size = pAI->getAllocationSizeInBits(DL);

  LLVMContext &C = pF->getContext();
	Value *arg = ConstantInt::get(Type::getInt64Ty(C), (*size) / 8);

  std::vector<Type *> arg_type;
  //arg_type.push_back(pAI->getType());
  Type *retType = Type::getInt8PtrTy(C);
  arg_type.push_back(retType);

	// Alloc (pacma / bndstr)
  IRBuilder<> Builder(pAI->getNextNode());
  auto cast = dyn_cast<Instruction>(Builder.CreateCast(Instruction::BitCast, pAI, Type::getInt8PtrTy(C)));
  auto array = Intrinsic::getDeclaration(pF->getParent(), Intrinsic::aos_alloc, arg_type);
  auto newAI = Builder.CreateCall(array, {cast, arg}, "");
  auto castB = Builder.CreateCast(Instruction::BitCast, newAI, pAI->getType());

	pAI->replaceAllUsesWith(castB);
	cast->setOperand(0, pAI);

	// Dealloc (bndclr)
	auto &BBB = pF->back();
	auto &IB = BBB.back();

  //if (IB.getOpcode() != Instruction::Ret)
  //  IB.dump();
	//assert(IB.getOpcode() == Instruction::Ret);

  IRBuilder<> Builder_E(&IB);

  auto castC = dyn_cast<Instruction>(Builder_E.CreateCast(Instruction::BitCast, castB, Type::getInt8PtrTy(C)));
  auto dealloc = Intrinsic::getDeclaration(pF->getParent(), Intrinsic::aos_dealloc, arg_type);
  Builder_E.CreateCall(dealloc, {castC}, "");
  //Builder_E.CreateCall(dealloc, {newAI}, "");

	return true;
}

bool AOSReachTestPass::handleGVAlloc(Function *pF, GlobalVariable *pGV) {
	Type *ty = pGV->getType()->getElementType();

	const DataLayout &DL = pF->getParent()->getDataLayout();
	auto size = DL.getTypeSizeInBits(ty);

  LLVMContext &C = pF->getContext();
	Value *arg = ConstantInt::get(Type::getInt64Ty(C), size / 8);

  std::vector<Type *> arg_type;
  Type *retType = Type::getInt8PtrTy(C);
  arg_type.push_back(retType);

	auto &BBF = pF->front();
	auto &IF = BBF.front();

  IRBuilder<> Builder_F(&IF);
  auto cast = Builder_F.CreateCast(Instruction::BitCast, pGV, Type::getInt8PtrTy(C));
  auto array = Intrinsic::getDeclaration(pF->getParent(), Intrinsic::aos_alloc, arg_type);
  auto newGV = Builder_F.CreateCall(array, {cast, arg}, "");
  auto castB = Builder_F.CreateCast(Instruction::BitCast, newGV, pGV->getType());

  //auto ptr = new GlobalVariable(*(pF->getParent()), pGV->getType(), false, GlobalVariable::ExternalWeakLinkage,
	//                             nullptr, "aos_ptr" + to_string(statNumGVSigned));
  auto ptr = new GlobalVariable(*(pF->getParent()), pGV->getType(), false, GlobalVariable::ExternalLinkage,
	                             0, "aos_ptr" + to_string(statNumGVSigned));
  ConstantPointerNull* const_ptr = ConstantPointerNull::get(pGV->getType());
  ptr->setInitializer(const_ptr);

	Builder_F.CreateStore(castB, ptr);

	// How to replace uses?
	for (auto pU: pGV->users()) {
		if (auto pI = dyn_cast<Operator>(pU)) {
			switch (pI->getOpcode()) {
				case Instruction::GetElementPtr:
				{
					auto GEPOp = dyn_cast<GEPOperator>(pI);
					vector<Value *> indices;
					for (auto it = GEPOp->idx_begin(); it != GEPOp->idx_end(); it++)
						indices.push_back(*it);
					//errs() << "Print users of user\n";
					for (auto pUb: GEPOp->users()) {
						if (auto pIb = dyn_cast<Instruction>(pUb)) {
							//pIb->dump();
							if (pIb == newGV) {
								//errs() << "Found newGV!\n";
								continue;
							}

              if (auto pPI = dyn_cast<PHINode>(pUb)) {
                // TODO
              } else {
                IRBuilder<> Builder_U(pIb);
                LoadInst *pLI = Builder_U.CreateLoad(pGV->getType(), ptr, "");
                auto gep = Builder_U.CreateGEP(pLI, indices, "");

                unsigned cnt = 0;
                for (auto op = pIb->op_begin(); op != pIb->op_end(); op++) {
                  if (*op == pI)
                    pIb->setOperand(cnt, gep);

                  cnt++;
                }
              }
						}
					}
					break;
				}
				case Instruction::BitCast:
				{
					auto BCOp = dyn_cast<BitCastOperator>(pI);
					Type *ty_b = BCOp->getDestTy();
					//errs() << "Print users of user\n";
					for (auto pUb: BCOp->users()) {
						if (auto pIb = dyn_cast<Instruction>(pUb)) {
							//pUb->dump();
							if (pUb == newGV) {
								//errs() << "Found newGV!\n";
								continue;
							}

							IRBuilder<> Builder_U(pIb);
							LoadInst *pLI = Builder_U.CreateLoad(pGV->getType(), ptr, "");
							auto bc = Builder_U.CreateCast(Instruction::BitCast, pLI, ty_b);

							unsigned cnt = 0;
							for (auto op = pIb->op_begin(); op != pIb->op_end(); op++) {
								if (*op == pI)
									pIb->setOperand(cnt, bc);

								cnt++;
							}
						}
					}
					break;
				}
				default:
					break;
			}
		}
	}

	//pGV->replaceAllUsesWith(pLI);
	//dyn_cast<BitCastOperator>(cast)->setOperand(0, pGV);

	return true;
}

//bool AOSReachTestPass::handleDealloc(Function *pF, ReturnInst *pRI) {
//
//  LLVMContext &C = pF->getContext();
//  std::vector<Type *> arg_type;
//  Type *retType = Type::getInt8PtrTy(C);
//  arg_type.push_back(retType);
//
//  IRBuilder<> Builder(pRI);
//
//	while (!free_list.empty()) {
//		Value *arg = free_list.front();
//		free_list.pop_front();
//
//	  auto dealloc = Intrinsic::getDeclaration(pF->getParent(), Intrinsic::aos_dealloc, arg_type);
//
//	  Builder.CreateCall(dealloc, {arg}, "");
//	}
//
//  return true;
//}


bool AOSReachTestPass::handleMalloc(Function *pF, CallInst *pCI) {
  auto arg = pCI->getArgOperand(0);

  std::vector<Type *> arg_type;
  arg_type.push_back(pCI->getType());

  IRBuilder<> Builder(pCI->getNextNode());
  auto malloc = Intrinsic::getDeclaration(pF->getParent(), Intrinsic::aos_malloc, arg_type);

  auto newCI = Builder.CreateCall(malloc, {pCI, arg}, "");

	pCI->replaceAllUsesWith(newCI);
	newCI->setOperand(0, pCI);

  return true;
}

bool AOSReachTestPass::handleCalloc(Function *pF, CallInst *pCI) {
  auto arg0 = pCI->getArgOperand(0);
  auto arg1 = pCI->getArgOperand(1);

  std::vector<Type *> arg_type;
  arg_type.push_back(pCI->getType());

  IRBuilder<> Builder_prev(pCI);
  Value *res = Builder_prev.CreateMul(arg0, arg1);

  IRBuilder<> Builder(pCI->getNextNode());
  auto calloc = Intrinsic::getDeclaration(pF->getParent(), Intrinsic::aos_calloc, arg_type);

  auto newCI = Builder.CreateCall(calloc, {pCI, res}, "");

	pCI->replaceAllUsesWith(newCI);
	newCI->setOperand(0, pCI);

  return true;
}

bool AOSReachTestPass::handleRealloc(Function *pF, CallInst *pCI) {
  auto arg0 = pCI->getArgOperand(0);
  auto arg1 = pCI->getArgOperand(1);

  std::vector<Type *> arg_type;
  arg_type.push_back(pCI->getType());

  IRBuilder<> Builder(pCI->getNextNode());
  auto realloc = Intrinsic::getDeclaration(pF->getParent(), Intrinsic::aos_realloc, arg_type);

  auto newCI = Builder.CreateCall(realloc, {pCI, arg0, arg1}, "");

	pCI->replaceAllUsesWith(newCI);
	newCI->setOperand(0, pCI);

  return true;
}

bool AOSReachTestPass::handleFree(Function *pF, CallInst *pCI) {
  auto arg = pCI->getArgOperand(0);

  std::vector<Type *> arg_type;
  //arg_type.push_back(pCI->getType());
  arg_type.push_back(arg->getType());

  IRBuilder<> Builder(pCI->getNextNode());
  auto free = Intrinsic::getDeclaration(pF->getParent(), Intrinsic::aos_free, arg_type);

  Builder.CreateCall(free, {arg}, "");

	//arg->replaceAllUsesWith(newCI);
	//pCI->setOperand(0, arg);
	//newCI->setOperand(0, arg);

  return true;
}

void AOSReachTestPass::printNode(AOSNode *node) {
	for (auto it = node->aliases.begin(); it != node->aliases.end(); it ++) {
		it->first->dump();
	}
}
