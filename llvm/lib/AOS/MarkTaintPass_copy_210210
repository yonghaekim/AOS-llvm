#include "llvm/Transforms/Scalar.h"
#include "llvm/IR/Module.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/ADT/Statistic.h"
#include "llvm/IR/IRBuilder.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Instructions.h"
#include "llvm/IR/Constants.h"
#include "llvm/Pass.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/Transforms/Utils/BasicBlockUtils.h"
#include "llvm/AOS/AOS.h"
#include <iostream>

using namespace llvm;
using namespace AOS;

#define DEBUG_TYPE "aos_mark_taint_pass"

namespace {
  class AOSMarkTaintPass : public FunctionPass {

  public:
    static char ID; // Pass identification, replacement for typeid
    AOSMarkTaintPass() : FunctionPass(ID) {}

  	std::set<Value *> visit_list;

    bool runOnFunction(Function &F) override;

  private:  
		std::set<Value*> getPointerAliases(std::set<Value*> alias_list, Value *pV);
		std::set<Value*> getDepUsers(std::set<Value*> user_list, Value *pV);
		bool findExIOFunc(std::set<Value *> user_list);
    void doTaintPropagation(std::set<Value *> user_list);
  };
}

char AOSMarkTaintPass::ID = 0;
static RegisterPass<AOSMarkTaintPass> X("aos-mark", "AOS mark taint pass");

Pass *llvm::AOS::createAOSMarkTaintPass() { return new AOSMarkTaintPass(); }

bool AOSMarkTaintPass::runOnFunction(Function &F) {
  bool function_modified = false;

  std::set<CallInst*> callInsts;

	//bool found = (std::find(my_list.begin(), my_list.end(), my_var) != my_list.end());

	//TODO: arguments?
	//errs() << F.getName() << "\n";

	//for (auto arg = F.arg_begin(); arg != F.arg_end(); ++arg) {
	//	errs() << "arg:\n";
	//	arg->dump();
	//	//if (auto* ci = dyn_cast<ConstantInt>(arg))
	//	//	errs() << ci->getValue() << "\n";
	//	//errs() << *arg << "\n";
	//}

	//TODO change to Module Pass, to include global variable and main arguments.

	for (auto &BB : F) {
		for (auto &I : BB) {
			bool needTaint = false;

			std::set<Value *> alias_list;

			if (AllocaInst *pAI = dyn_cast<AllocaInst>(&I)) {
				errs() << "Found AllocaInst!\n";
				pAI->dump();

				alias_list.insert(dyn_cast<Value>(pAI));
				alias_list = getPointerAliases(alias_list, dyn_cast<Value>(pAI));

				needTaint = findExIOFunc(alias_list);
			} else if (CallInst *pCI = dyn_cast<CallInst>(&I)) {
				Function *pF = pCI->getCalledFunction();

				if (pF && (pF->getName() == "malloc" ||
										pF->getName() == "calloc" ||
										pF->getName() == "realloc")) {
					errs() << "Found " << pF->getName() << "\n";
					pCI->dump();

					alias_list.insert(dyn_cast<Value>(pCI));
					alias_list = getPointerAliases(alias_list, dyn_cast<Value>(pCI));

					needTaint = findExIOFunc(alias_list);
				}
			}

			if (needTaint) {
				for (auto it = alias_list.begin(); it != alias_list.end(); it++) {
					(*it)->dump();
				}

				//TODO propagation
				doTaintPropagation(alias_list);

				alias_list.clear();
				visit_list.clear();
			}
		}
	}

  return function_modified;
}

std::set<Value*> AOSMarkTaintPass::getPointerAliases(std::set<Value*> alias_list, Value *pV) {
	// Check if already visited
	if (std::find(visit_list.begin(), visit_list.end(), pV)
								!= visit_list.end())
		return alias_list;

	visit_list.insert(pV);

	for (auto U: pV->users()) {
		//errs() << "pV->users():\n";
		//U->dump();

		if (auto pUI = dyn_cast<Instruction>(U)) {
			switch (pUI->getOpcode()) {
				case Instruction::Call:
			  {
					errs() << "Handle Call Inst!\n";
					pUI->dump();

					CallInst *pCI = dyn_cast<CallInst>(pUI);
					Function *pF = pCI->getCalledFunction();

					//TODO can intrinsic func return pointer alias?
					if (pF && !pF->isVarArg() && !pF->isDeclaration()) {
						unsigned arg_nth = 0;

						for (auto arg = pCI->arg_begin(); arg != pCI->arg_end(); ++arg) {
							if (dyn_cast<Value>(arg) == pV)
								break;

							arg_nth++;
						}

						assert(arg_nth < pCI->arg_size());
						assert(!pF->isVarArg()); //TODO: handle variable number of arguments

						//errs() << "arg_nth: " << arg_nth << "\n";

						unsigned t = 0;
						for (auto arg = pF->arg_begin(); arg != pF->arg_end(); arg++) {
							if (t++ == arg_nth) {
								//arg->dump();

								std::set<Value *> arg_alias_list;
								arg_alias_list = getPointerAliases(arg_alias_list, arg);

								for (auto it = arg_alias_list.begin(); it != arg_alias_list.end(); it++) {
									alias_list.insert(*it);

									//return value...? can iterate over user list from func?
									if (ReturnInst *pRI = dyn_cast<ReturnInst>(*it)) {
										//errs() << "Found return inst!\n";
										alias_list = getPointerAliases(alias_list, dyn_cast<Value>(pCI));
									}
								}

								arg_alias_list.clear();

								break;
							}
						}
					}

					break;
				}
				case Instruction::Store:
				{
					auto pSI = dyn_cast<StoreInst>(pUI);

					if (pSI->getValueOperand() == pV) {
						//errs() << "Handle Store Inst!\n";

						auto op = pSI->getPointerOperand();

						for (auto U2: op->users()) {
							if (auto pUI2 = dyn_cast<Instruction>(U2)) {
								if (pUI2->getOpcode() == Instruction::Load) {
									auto pLI = dyn_cast<LoadInst>(pUI2);

									if (std::find(alias_list.begin(), alias_list.end(), dyn_cast<Value>(pLI))
																== alias_list.end())
										alias_list.insert(dyn_cast<Value>(pLI));

									alias_list = getPointerAliases(alias_list, dyn_cast<Value>(pLI));
									
									assert(pLI->getPointerOperand() == dyn_cast<Value>(op));
								}
							}
						}
					}

					break;
				}
				case Instruction::Select:
				case Instruction::PHI:
				case Instruction::BitCast:
				case Instruction::GetElementPtr:
				case Instruction::PtrToInt:
				case Instruction::IntToPtr:
				{
					//errs() << "Handle Inst!\n";
					//if (std::find(alias_list.begin(), alias_list.end(), dyn_cast<Value>(pUI))
					//							== alias_list.end())
					alias_list.insert(dyn_cast<Value>(pUI));
					alias_list = getPointerAliases(alias_list, dyn_cast<Value>(pUI));
					break;
				}
				default:
					break;
			}
		}
	}

	return alias_list;
}

std::set<Value*> AOSMarkTaintPass::getDepUsers(std::set<Value *> user_list, Value *pV) {

	// Check if already handled
	if (std::find(visit_list.begin(), visit_list.end(), pV)
								!= visit_list.end())
		return user_list;

	user_list.insert(pV);

	for (auto U: pV->users()) {
		errs() << "--------I am a user of a user";
		U->dump();

		if (auto pUI = dyn_cast<Instruction>(U)) {
			switch (pUI->getOpcode()) {
				case Instruction::Call:
				{
					//errs() << "Handle Call Inst!\n";

					CallInst *pCI = dyn_cast<CallInst>(pUI);
					Function *pF = pCI->getCalledFunction();

					//TODO can intrinsic func return pointer alias?
					if (!pF->isDeclaration()) {
						unsigned arg_nth = 0;

						for (auto arg = pCI->arg_begin(); arg != pCI->arg_end(); ++arg) {
							if (dyn_cast<Value>(arg) == pV)
								break;

							arg_nth++;
						}

						assert(arg_nth < pCI->arg_size());
						assert(!pF->isVarArg()); //TODO: handle variable number of arguments

						//errs() << "arg_nth: " << arg_nth << "\n";

						unsigned t = 0;
						for (auto arg = pF->arg_begin(); arg != pF->arg_end(); arg++) {
							if (t++ == arg_nth) {
								//arg->dump();

								std::set<Value *> arg_user_list;
								arg_user_list = getDepUsers(arg_user_list, arg);

								for (auto it = arg_user_list.begin(); it != arg_user_list.end(); it++) {
									user_list.insert(*it);

									//return value...? can iterate over user list from func?
									if (ReturnInst *pRI = dyn_cast<ReturnInst>(*it)) {
										//errs() << "Found return inst!\n";
										user_list = getPointerAliases(user_list, dyn_cast<Value>(pCI));
									}
								}

								arg_user_list.clear();

								break;
							}
						}
					} else {
						//TODO need to insert intrinsic function????
						user_list.insert(dyn_cast<Value>(pUI));
						user_list = getDepUsers(user_list, dyn_cast<Value>(pUI));
					}

					break;
				}
				case Instruction::Store:
				{
					auto pSI = dyn_cast<StoreInst>(pUI);

					if (pSI->getValueOperand() == pV) {
						//errs() << "Handle Store Inst!\n";

						auto op = pSI->getPointerOperand();

						for (auto U2: op->users()) {
							if (auto pUI2 = dyn_cast<Instruction>(U2)) {
								if (pUI2->getOpcode() == Instruction::Load) {
									auto pLI = dyn_cast<LoadInst>(pUI2);

									if (std::find(user_list.begin(), user_list.end(), dyn_cast<Value>(pLI))
																== user_list.end())
										user_list.insert(dyn_cast<Value>(pLI));

									user_list = getDepUsers(user_list, dyn_cast<Value>(pLI));
									
									assert(pLI->getPointerOperand() == dyn_cast<Value>(op));
								}
							}
						}
					}

					break;
				}
				case Instruction::Load:
					break;
				default:
				{
					user_list.insert(dyn_cast<Value>(pUI));
					user_list = getDepUsers(user_list, dyn_cast<Value>(pUI));
					break;
				}
			}
		}
	}

	return user_list;
}

bool AOSMarkTaintPass::findExIOFunc(std::set<Value *> alias_list) {

	// iterate alias_list
	for (auto alias = alias_list.begin(); alias != alias_list.end(); alias++) {
		for (auto U : (*alias)->users()) {
			//errs() << "    ";
			//U->dump();

			if (CallInst *pCI = dyn_cast<CallInst>(U)) {
				Function *pF = pCI->getCalledFunction();

				//errs() << "  @@pF->name(): " << pF->getName() << "\n";
				if (pF && pF->getName() == "__isoc99_scanf") {
					errs() << "Found scanf:";
					U->dump();

					for (auto arg = pCI->arg_begin(); arg != pCI->arg_end(); ++arg) {
						if (std::find(alias_list.begin(), alias_list.end(),
													dyn_cast<Value>(arg)) != alias_list.end())
							return true;
					}		
				} else if (pF && (pF->getName() == "fscanf" ||
										pF->getName() == "__isoc99_fscanf")) {
					errs() << "Found fscanf:";
					U->dump();

					int t = 0;
					for (auto arg = pCI->arg_begin(); arg != pCI->arg_end(); ++arg) {
						if (++t == 0)
							continue;

						if (std::find(alias_list.begin(), alias_list.end(),
													dyn_cast<Value>(arg)) != alias_list.end())
							return true;
					}
				}
				// TODO more IO functions...
			}
		}
	}

	return false;
}

void AOSMarkTaintPass::doTaintPropagation(std::set<Value *> alias_list) {
	errs() << "--Start taint propagation\n";

	for (auto it = alias_list.begin(); it != alias_list.end(); it++) {
		errs() << "----I am an alias";
		(*it)->dump();
		(*it)->setTainted(true);

		for (auto U : (*it)->users()) {
			errs() << "------I am a user";
  		U->dump();
			U->setTainted(true);

			if (auto pUI = dyn_cast<Instruction>(U)) {
				if (pUI->getOpcode() == Instruction::Load) {
					std::set<Value *> user_list;

					visit_list.clear();
					user_list = getDepUsers(user_list, dyn_cast<Value>(pUI));

					//for (auto itb = user_list.begin(); itb != user_list.end(); itb++) {
					//	(*itb)->dump();
					//	(*itb)->setTainted(true);
					//}

					user_list.clear();
				}
			}
		}
	}
}

