#include "llvm/AOS/AOSPointerAliasPass.h"

char AOSPointerAliasPass::ID = 0;

static RegisterPass<AOSPointerAliasPass> X("aos-alias", "AOS pointer alias pass");

Pass *llvm::AOS::createAOSPointerAliasPass() { return new AOSPointerAliasPass(); }

bool AOSPointerAliasPass::runOnModule(Module &M) {
	// Handle global variables
	handleGlobalVariables(M);

	getFunctionsFromCallGraph(M);

	for (auto it = func_list.begin(); it != func_list.end(); it++) {
		Function *pF = (*it);

		if (pF && !pF->isDeclaration()) {
			//errs() << "pF->getName(): " << pF->getName() << "\n";
			std::list<std::vector<BasicBlock *>> SCCBBs_list;

			for (scc_iterator<Function*> I = scc_begin(pF); I != scc_end(pF); ++I)
				SCCBBs_list.push_back(*I);

			while (!SCCBBs_list.empty()) {
				const std::vector<BasicBlock *> SCCBBs = SCCBBs_list.back();
				SCCBBs_list.pop_back();

				// Obtain the vector of BBs in this SCC and print it out.
				//const std::vector<BasicBlock *> &SCCBBs = *I;
				//outs() << "  SCC: ";
				for (std::vector<BasicBlock *>::const_iterator BBI = SCCBBs.begin();
																											 BBI != SCCBBs.end(); ++BBI) {
					// Handle AllocaInst and CallInst (malloc)
					handleInstructions(*BBI);
					//outs() << (*BBI)->getName() << "  ";
				}
				//outs() << "\n";
			}
		}
	}

	//for (auto it = alias_map.begin(); it != alias_map.end(); it++) {
	//	errs() << "Print pointer!\n--";
	//	it->pointer->dump();
	//	for (auto itb = it->alias_pairs.begin(); itb != it->alias_pairs.end(); itb++) {
	//		errs() << "  Print alias!\n  ----";
	//		itb->alias->dump();
	//		//itb->index_list->dump();
	//		errs() << "    Print index!\n";
	//		int cnt = 0;
	//		for (auto itc = itb->index_list.begin(); itc != itb->index_list.end(); itc++) {
	//			errs() << "    ----[" << cnt << "]";
	//			(*itc)->dump();;
	//			cnt++;
	//		}
	//		errs() << "\n";
	//	}
	//}

  return false;
}


void AOSPointerAliasPass::getAnalysisUsage(AnalysisUsage &AU) const {
	AU.setPreservesAll();
	AU.addRequired<CallGraphWrapperPass>();
}

std::list<AOSPointerAliasPass::PtrAlias> AOSPointerAliasPass::getAliasMap() {
	return alias_map;
}

void AOSPointerAliasPass::handleGlobalVariables(Module &M) {
	for (auto &G : M.getGlobalList()) {
		GlobalVariable *pGV = dyn_cast<GlobalVariable>(&G);

		// Skip constant GV
		if (pGV->isConstant())
			continue;

		std::list<Value*> index_list;
		PtrAlias ptr_alias(pGV, index_list);

		//if (find_pointer(pGV))
		//	continue;

		ptr_alias.start_idx = get_start_idx(pGV->getType()->getElementType());

		ptr_alias = getPointerAliases(ptr_alias, pGV, index_list);
		alias_map.push_back(ptr_alias);

		//errs() << "Found GlobalVariable!\n";
		//pGV->dump();

		visit_set.clear();
	}
}

void AOSPointerAliasPass::handleInstructions(BasicBlock *BB) {
	for (auto &I : *BB) {
		std::list<Value*> index_list;
		PtrAlias ptr_alias(dyn_cast<Value>(&I), index_list);

		//if (find_pointer(&I)) //TODO really need this?
		//	continue;

		CallInst *pCI = dyn_cast<CallInst>(&I);
		InvokeInst *pII = dyn_cast<InvokeInst>(&I);

		if (AllocaInst *pAI = dyn_cast<AllocaInst>(&I)) {
			ptr_alias.start_idx = get_start_idx(pAI->getAllocatedType());
			//errs() << "Found AllocaInst!\n";
			//pAI->dump();
			ptr_alias = getPointerAliases(ptr_alias, pAI, index_list);
			alias_map.push_back(ptr_alias);
		} else if (pCI || pII) {
			Type *Ty;
			Function *pF;

			if (pCI) {
				Ty = pCI->getType();
				pF = pCI->getCalledFunction();
			} else {
				Ty = pII->getType();
				pF = pII->getCalledFunction();
			}
			//errs() << "pF->name: " << pF->getName();

			if (pF && (pF->getName() == "malloc" ||
									pF->getName() == "calloc" ||
									pF->getName() == "realloc" ||
									pF->getName() == "_Znwm" /* new */)) {

				for (auto U : I.users()) {
					if (BitCastInst *pBC = dyn_cast<BitCastInst>(U)) {
						Ty = pBC->getDestTy();
						break;
					}
				}

				ptr_alias.start_idx = get_start_idx(Ty);
				ptr_alias = getPointerAliases(ptr_alias, &I, index_list);
				alias_map.push_back(ptr_alias);
			} else if (pF && pF->getName() == "_Znam") { // new[]
				bool chk = false;
				for (auto U : I.users()) { //TODO....
					if (GetElementPtrInst *pGEPI = dyn_cast<GetElementPtrInst>(U)) {
						for (auto U2: pGEPI->users()) {
							if (BitCastInst *pBC = dyn_cast<BitCastInst>(U2)) {
								Ty = pBC->getDestTy();
								chk = true;
								break;
							}
						}

						if (chk)
							break;
					}
				}

				ptr_alias.start_idx = get_start_idx(Ty) + 1;
				ptr_alias = getPointerAliases(ptr_alias, &I, index_list);
				alias_map.push_back(ptr_alias);
			//} else if (pF && (pF->getName() == "fopen" ||
			//									pF->getName() == "freopen" ||
			//									pF->getName() == "fgetc" ||
			} else if (pF && (pF->getName() == "fgetc" ||
												pF->getName() == "fgetc_unlocked" ||
												pF->getName() == "getc" ||
												pF->getName() == "getc_unlocked" ||
												pF->getName() == "_IO_getc" ||
												pF->getName() == "getchar" ||
												pF->getName() == "getchar_unlocked" ||
												pF->getName() == "fgetwc" ||
												pF->getName() == "fgetwc_unlocked" ||
												pF->getName() == "getwc" ||
												pF->getName() == "getwc_unlocked" ||
												pF->getName() == "getwchar" ||
												pF->getName() == "getwchar_unlocked")) {
				ptr_alias.start_idx = 1; //TODO need to check
				ptr_alias = getPointerAliases(ptr_alias, &I, index_list);
				alias_map.push_back(ptr_alias);
			}
		}

		visit_set.clear();
	}
}

AOSPointerAliasPass::PtrAlias AOSPointerAliasPass::getPointerAliases(PtrAlias ptr_alias, Value *pV, std::list<Value*> index_list) {
	//@spec_fd, {{@buf, {i64 0, i64 %idxprom22, i32 3}}, {%len, {i64 0, i64 %idxprom22, i32 1}}}

	// Check if already visited
	if (std::find(visit_set.begin(), visit_set.end(), pV)
								!= visit_set.end())
		return ptr_alias;

	visit_set.insert(pV);

	for (auto U: pV->users()) {
		//ptr_alias.pointer->dump();
		//errs() << "--pV->users(): ";
		//U->dump();

		if (auto pUI = dyn_cast<Instruction>(U)) {
			switch (pUI->getOpcode()) {
				case Instruction::Invoke:
				case Instruction::Call:
				{
					//errs() << "Found Invoke!\n";
					Function *pF;

					if (InvokeInst *pII = dyn_cast<InvokeInst>(pUI))
						pF = pII->getCalledFunction();
					else if (CallInst *pCI = dyn_cast<CallInst>(pUI))
						pF = pCI->getCalledFunction();

					//TODO can intrinsic func return pointer alias?
					if (pF && !pF->isVarArg() && !pF->isDeclaration()) {
						unsigned arg_nth = 0;

						if (InvokeInst *pII = dyn_cast<InvokeInst>(pUI)) {
							for (auto arg = pII->arg_begin(); arg != pII->arg_end(); ++arg) {
								if (dyn_cast<Value>(arg) == pV)
									break;

								arg_nth++;
							}

							assert(arg_nth < pII->arg_size());
						}	else if (CallInst *pCI = dyn_cast<CallInst>(pUI)) {
							for (auto arg = pCI->arg_begin(); arg != pCI->arg_end(); ++arg) {
								if (dyn_cast<Value>(arg) == pV)
									break;

								arg_nth++;
							}

							assert(arg_nth < pCI->arg_size());
						}

						assert(!pF->isVarArg()); //TODO: handle variable number of arguments

						unsigned t = 0;
						for (auto arg = pF->arg_begin(); arg != pF->arg_end(); arg++) {
							if (t++ == arg_nth) {
								AliasPair pair(arg, index_list);
								ptr_alias.alias_pairs.push_back(pair);
								ptr_alias = getPointerAliases(ptr_alias, arg, index_list);
								break;
							}
						}
					}

					break;
				}
				case Instruction::Store:
				{
					auto pSI = dyn_cast<StoreInst>(pUI);

					if (pSI->getValueOperand() == pV) {
						//errs() << "Handle Store Inst!\n";
						//pSI->dump();

						auto op = pSI->getPointerOperand();

						if (!find_alias(op)) {
							//errs() << "Couldn't find alias!\n";
							//assert(false);

							if (Instruction *_pU = dyn_cast<Instruction>(op)) {
							} else {
								if (GEPOperator *_pGEPOp = dyn_cast<GEPOperator>(op))
									op->dump();
									assert(false);
							}

							for (auto opU: op->users()) {
								if (auto pLI = dyn_cast<LoadInst>(opU)) {
									AliasPair pair(pLI, index_list);
									ptr_alias.alias_pairs.push_back(pair);
									ptr_alias = getPointerAliases(ptr_alias, pLI, index_list);
								}
							}

						} else {
							bool chk = false;
							int start_idx;
							std::list<Value*> index_list_op;

							for (auto it = alias_map.begin(); it != alias_map.end(); it++) {
								for (auto itb = it->alias_pairs.begin(); itb != it->alias_pairs.end(); itb++) {
									if (itb->alias == dyn_cast<Value>(op)) {
										start_idx = it->start_idx;
										index_list_op = itb->index_list;
										chk = true;
										break;
									}
								}

								//
								if (chk) {
									for (auto itb = it->alias_pairs.begin(); itb != it->alias_pairs.end(); itb++) {
										if (index_compare(index_list_op, itb->index_list, start_idx)) {
											for (auto opU: itb->alias->users()) {
												if (auto pLI = dyn_cast<LoadInst>(opU)) {
													//errs() << "Found GEP->Load Inst!\n";
													//pLI->dump();
													AliasPair pair(pLI, index_list);
													ptr_alias.alias_pairs.push_back(pair);
													ptr_alias = getPointerAliases(ptr_alias, pLI, index_list_op);
													//assert(pLI->getPointerOperand() == dyn_cast<Value>(op));
												}
											}
										}
									}

									break;
								}
							}
						} // } else {
					}

					break;
				}
				case Instruction::GetElementPtr:
				{
					std::list<Value*> index_list_new = index_list;
					auto pGEPI = dyn_cast<GetElementPtrInst>(pUI);

					for (auto it = pGEPI->idx_begin(); it != pGEPI->idx_end(); it++) {
						if (it != pGEPI->idx_begin()) {
							index_list_new.push_back(*it);
						}
					}

					AliasPair pair(pUI, index_list_new);
					ptr_alias.alias_pairs.push_back(pair);
					ptr_alias = getPointerAliases(ptr_alias, pUI, index_list_new);

					break;
				}
				case Instruction::Ret:
				{
					ReturnInst *pRI = dyn_cast<ReturnInst>(pUI);
					Function *pF = pRI->getFunction();

					if (pV == pRI->getReturnValue()) {
						for (auto Ub : pF->users()) {
							if (CallInst *pCI = dyn_cast<CallInst>(Ub)) {
								AliasPair pair(pCI, index_list);
								ptr_alias.alias_pairs.push_back(pair);
								ptr_alias = getPointerAliases(ptr_alias, pCI, index_list);
							}
						}

						//errs() << "Found Return!\n";
					}
					break;
				}
				case Instruction::Select:
				case Instruction::PHI:
				case Instruction::BitCast:
				case Instruction::PtrToInt:
				case Instruction::IntToPtr:
				case Instruction::Add:
				case Instruction::Sub:
				case Instruction::Shl:
				//case Instruction::Lshr:
				//case Instruction::Ashr:
				case Instruction::And:
				case Instruction::Or:
				case Instruction::Xor:
				{
					//errs() << "Handle Inst!\n";
					AliasPair pair(pUI, index_list);
					ptr_alias.alias_pairs.push_back(pair);
					ptr_alias = getPointerAliases(ptr_alias, pUI, index_list);

					break;
				}
				default:
					break;
			}
		} else if (BitCastOperator *BCOp = dyn_cast<BitCastOperator>(U)) {
			std::list<Value*> index_list_new = index_list;

			if (GEPOperator *GEPOp = dyn_cast<GEPOperator>(BCOp->getOperand(0))) {
				for (auto it = GEPOp->idx_begin(); it != GEPOp->idx_end(); it++) {
					if (it != GEPOp->idx_begin()) {
						index_list_new.push_back(*it);
					}
				}
			}

			AliasPair pair(U, index_list_new);
			ptr_alias.alias_pairs.push_back(pair);
		} else if (GEPOperator *GEPOp = dyn_cast<GEPOperator>(U)) {
			//errs() << "I am GEP Op!\n";
			//U->dump();
			std::list<Value*> index_list_new = index_list;

			for (auto it = GEPOp->idx_begin(); it != GEPOp->idx_end(); it++) {
				if (it != GEPOp->idx_begin()) {
					index_list_new.push_back(*it);
				}
			}

			AliasPair pair(U, index_list_new);
			ptr_alias.alias_pairs.push_back(pair);
			ptr_alias = getPointerAliases(ptr_alias, U, index_list_new);
		}
	}

	return ptr_alias;
}

bool AOSPointerAliasPass::find_pointer(Value *V) {
	for (auto it = alias_map.begin(); it != alias_map.end(); it++)
		if (it->pointer == V)
			return true;

	return false;
}

bool AOSPointerAliasPass::find_alias(Value *V) {
	for (auto it = alias_map.begin(); it != alias_map.end(); it++)
		for (auto itb = it->alias_pairs.begin(); itb != it->alias_pairs.end(); itb++)
			if (itb->alias == V)
				return true;

	return false;
}

bool AOSPointerAliasPass::index_compare(std::list<Value*> idx_list_a, std::list<Value*> idx_list_b, int start_idx) {
	auto itr_a = idx_list_a.begin();
	auto itr_b = idx_list_b.begin();
	//errs() << "size: " << size << "\n";

	if (idx_list_a.size() != idx_list_b.size())
		return false;

	for (int i=0; i<idx_list_a.size(); i++, itr_a++, itr_b++) {
		if (i < start_idx)
			continue;

		if (*itr_a != *itr_b)
			return false;
	}

	return true;
}

int AOSPointerAliasPass::get_start_idx(Type *Ty) {
	int start_idx = 0;

	while (Ty->isArrayTy()) {
		Ty = Ty->getArrayElementType();
		start_idx++;
	}

	return start_idx;
}

void AOSPointerAliasPass::getFunctionsFromCallGraph(Module &M) {
	CallGraph &CG = getAnalysis<CallGraphWrapperPass>().getCallGraph();
	std::list<CallGraphNode*> cgn_list;
	std::list<CallGraphNode*> cgn_visit_list;

	cgn_list.push_back(CG[M.getFunction("main")]);
	cgn_visit_list.push_back(CG[M.getFunction("main")]);
	func_list.push_back(M.getFunction("main"));

	while (!cgn_list.empty()) {
		CallGraphNode *pCGN = cgn_list.front();
		cgn_list.pop_front();

		for (auto it = pCGN->begin(); it != pCGN->end(); it++) {
			if (CallGraphNode *cgn = it->second) {
				if (std::find(cgn_visit_list.begin(), cgn_visit_list.end(), cgn)
							!= cgn_visit_list.end())
					continue;

				cgn_list.push_back(cgn);
				cgn_visit_list.push_back(cgn);

				if (Function *F = cgn->getFunction()) {
					if (std::find(func_list.begin(), func_list.end(), F) == func_list.end()) {
						//errs() << "Pushing this function! " << F->getName() << "\n";
						func_list.push_back(F);
					}
				}
			}
		}
	}

	for (auto &F : M) {
		if (std::find(func_list.begin(), func_list.end(), &F) == func_list.end()) {
			//errs() << "[Late] Pushing this function! " << F.getName() << "\n";
			func_list.push_back(&F);
		}
	}
}


