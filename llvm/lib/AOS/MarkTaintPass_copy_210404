#include "llvm/AOS/AOSMarkTaintPass.h"

char AOSMarkTaintPass::ID = 0;
static RegisterPass<AOSMarkTaintPass> X("aos-mark", "AOS mark taint pass");

Pass *llvm::AOS::createAOSMarkTaintPass() { return new AOSMarkTaintPass(); }

bool AOSMarkTaintPass::runOnModule(Module &M) {
	errs() << "Start taint propagation pass!\n";
  AOSPointerAliasPass &MT = getAnalysis<AOSPointerAliasPass>();
	root_node = MT.getRootNode();
  value_map = MT.getValueMap();

  handleCmdLineArguments(M);

  handleGlobalVariables(M);

  handleInstructions(M);

	unsigned cnt = 0;
	//errs() << "Print ExInputSet!\n";
	for (auto it = ex_input_set.begin(); it != ex_input_set.end(); it++) {
		(*it)->dump();
		cnt++;
	}
	errs() << "Total #: "<< cnt << "\n";

  return false;
}

void AOSMarkTaintPass::getAnalysisUsage(AnalysisUsage &AU) const {
	AU.setPreservesAll();
  AU.addRequired<AOSPointerAliasPass>();
}

map<Value *, AOSPointerAliasPass::AOSNode *> AOSMarkTaintPass::getValueMap() {
	return value_map;
}

void AOSMarkTaintPass::handleCmdLineArguments(Module &M) {
	// TODO Need to maintain aliases for the arguments...
  for (auto &F : M) {
		if (&F && F.getName() == "main") {

			unsigned t = 0;
			for (auto arg = F.arg_begin(); arg != F.arg_end(); arg++) {
				// argc
				if (t == 0) {
					for (auto pU: arg->users()) {
						if (StoreInst *pSI = dyn_cast<StoreInst>(pU)) {
							if (pSI->getValueOperand() == arg) {				
								auto ptrOp = pSI->getPointerOperand();

								for (auto pUb: ptrOp->users()) {
									if (LoadInst *pLI = dyn_cast<LoadInst>(pUb)) {
										doTaintPropagation(pLI);
									}
								}

								break;
							}
						}
					}
				// argv
				} else if (t == 1) {
					for (auto pU: arg->users()) {
						if (StoreInst *pSI = dyn_cast<StoreInst>(pU)) {
							if (pSI->getValueOperand() == arg) {
								auto ptrOp = pSI->getPointerOperand();

								for (auto pUb: ptrOp->users()) {
									if (LoadInst *pLI = dyn_cast<LoadInst>(pUb)) {
										doTaintPropagation(pLI);
									}
								}

								break;
							}
						}
					}
				} else {
					break;
				}

				t++;
			}
		}
	}
}

void AOSMarkTaintPass::handleGlobalVariables(Module &M) {
	for (auto &G : M.getGlobalList()) {
		GlobalVariable *pGV = dyn_cast<GlobalVariable>(&G);

		// Skip constant GV
		if (pGV->isConstant())
			continue;

    checkAndPropTaint(pGV);
  }
}

void AOSMarkTaintPass::handleInstructions(Module &M) {
  for (auto &F : M) {
    for (auto &BB : F) {
      for (auto &I : BB) {
        switch(I.getOpcode()) {
          case Instruction::Alloca:
          {
            AllocaInst *pAI = dyn_cast<AllocaInst>(&I);
            checkAndPropTaint(pAI);

            break;
          }
          case Instruction::Invoke:
          case Instruction::Call:
          {
            Function *pF;

            if (CallInst *pCI = dyn_cast<CallInst>(&I))
              pF = pCI->getCalledFunction();
            else if (InvokeInst *pII = dyn_cast<InvokeInst>(&I))
              pF = pII->getCalledFunction();

            if (pF && (pF->getName() == "malloc" ||
                        pF->getName() == "calloc" ||
                        pF->getName() == "realloc" ||
                        pF->getName() == "_Znwm" /* new */ ||
                        pF->getName() == "_Znam" /* new[] */)) {

              checkAndPropTaint(&I); // TODO
            } else if (pF && (pF->getName() == "fgetc" ||
                              pF->getName() == "fgetc_unlocked" ||
                              pF->getName() == "getc" ||
                              pF->getName() == "getc_unlocked" ||
                              pF->getName() == "_IO_getc" ||
                              pF->getName() == "getchar" ||
                              pF->getName() == "getchar_unlocked" ||
                              pF->getName() == "fgetwc" ||
                              pF->getName() == "fgetwc_unlocked" ||
                              pF->getName() == "getwc" ||
                              pF->getName() == "getwc_unlocked" ||
                              pF->getName() == "getwchar" ||
                              pF->getName() == "getwchar_unlocked")) {
              //errs() << "Found " << pF->getName() << ": ";
              //pCI->dump();
              ex_input_set.insert(&I);
              doTaintPropagation(&I);
            }

            break;
          }
          default:
            break;
        }
      }
    }
	}
}

void AOSMarkTaintPass::checkAndPropTaint(Value *pV) {
  //errs() << "--- Check for this value! ---\n";
  //pV->dump();

  list<AOSNode *> node_list;
  set<AOSNode *> visit_set;
  bool needTaint = false;
  AOSNode *node = value_map[pV];

	printNode(node);
  assert(node != nullptr);

  node_list.push_back(node);
  visit_set.insert(node);

  while (!node_list.empty()) {
    node = node_list.front();
    node_list.pop_front();

    //errs() << "Print AOSNode!\n";
    for (auto it = node->aliases.begin(); it != node->aliases.end(); it++) {
			needTaint = needTaint | findExInputFunc(it->first);
			//if (needTaint = findExInputFunc(it->first))
			//	break;
    }

    if (needTaint) {
    //  errs() << "*** Found variable to taint! *** ";
      handleAOSNode(node);
			//doTaintPropagation(node);
    }

    for (auto it = node->children.begin(); it != node->children.end(); it++) {
      if (visit_set.find(*it) == visit_set.end()) {
	      printNode(*it);
        visit_set.insert(*it);
        node_list.push_back(*it);
      }
    }
  }
}

bool AOSMarkTaintPass::findExInputFunc(Value *pV) {
	bool needTaint = false;

	for (auto U : pV->users()) {
		//errs() << "In findExInputFunc\n";
		//pV->dump();
    //U->dump();
		if (CallInst *pCI = dyn_cast<CallInst>(U)) {
			Function *pF = pCI->getCalledFunction();
			//errs() << "  @@pF->name(): " << pF->getName() << "\n";
			if (pF && (pF->getName() == "__isoc99_scanf" ||
									pF->getName() == "scanf" ||
									pF->getName() == "wscanf")) {
				//errs() << "Found " << pF->getName() << ": ";
				//U->dump();
				// Except arg 0
				int t = 0;
				for (auto arg = pCI->arg_begin(); arg != pCI->arg_end(); ++arg) {
					if (t != 0 && dyn_cast<Value>(arg) == pV) {
						needTaint = true;
						ex_input_set.insert(dyn_cast<Value>(U));
						break;
						//return true;
					}

					t++;
				}		
			} else if (pF && (pF->getName() == "fscanf" ||
												pF->getName() == "__isoc99_fscanf" ||
												pF->getName() == "wscanf")) {
				//errs() << "Found " << pF->getName() << ": ";
				//U->dump();
				// Except arg 0 & 1
				int t = 0;
				for (auto arg = pCI->arg_begin(); arg != pCI->arg_end(); ++arg) {
					if (t != 0 && t != 1 && dyn_cast<Value>(arg) == pV) {
						needTaint = true;
						ex_input_set.insert(dyn_cast<Value>(U));
						break;
						//return true;
					}

					t++;
				}
			} else if (pF && (pF->getName() == "fread" ||
												pF->getName() == "fread_unlocked" ||
												pF->getName() == "fgets" ||
												pF->getName() == "fgets_unlocked" ||
												pF->getName() == "gets" ||
												pF->getName() == "gets_unlocked" ||
												//pF->getName() == "read" ||
												pF->getName() == "getline")) {
				//errs() << "Found " << pF->getName() << ": ";
				//U->dump();
				// Arg 0
				int t = 0;
				for (auto arg = pCI->arg_begin(); arg != pCI->arg_end(); ++arg) {
					if (t == 0 && dyn_cast<Value>(arg) == pV) {
						needTaint = true;
						ex_input_set.insert(dyn_cast<Value>(U));
						break;
						//return true;
					}

					t++;
				}
			} else if (pF && (pF->getName() == "_ZNSi7getlineEPcl" ||
												pF->getName() == "read")) {
				// std::iostream&.getline()
				//errs() << "Found " << pF->getName() << ": ";
				//U->dump();
				// Arg 1
				int t = 0;
				for (auto arg = pCI->arg_begin(); arg != pCI->arg_end(); ++arg) {
					if (t == 1 && dyn_cast<Value>(arg) == pV) {
						needTaint = true;
						ex_input_set.insert(dyn_cast<Value>(U));
						break;
					}

					t++;
				}
			}
		} else if (InvokeInst *pII = dyn_cast<InvokeInst>(U)) {
			Function *pF = pII->getCalledFunction();

			if (pF && pF->getName() == "_ZNSi7getlineEPcl") {
				// std::iostream&.getline()
				//errs() << "Found " << pF->getName() << ": ";
				//U->dump();
				// Arg 1
				int t = 0;
				for (auto arg = pII->arg_begin(); arg != pII->arg_end(); ++arg) {
					if (t == 1 && dyn_cast<Value>(arg) == pV) {
						needTaint = true;
						ex_input_set.insert(dyn_cast<Value>(U));
						break;
					}

					t++;
				}
			}
		}
	}

	return needTaint;
}

void AOSMarkTaintPass::handleAOSNode(AOSNode *node) {
  if (visit_node_set.find(node) != visit_node_set.end())
    return;

  visit_node_set.insert(node);
  node->setTainted(true);

  for (auto it = node->aliases.begin(); it != node->aliases.end(); it++) {
    Value *pV = it->first;

    for (auto pU: pV->users()) {
      // Taint & propagate data loaded from tainted pointers
      // Mark nodes that store tainted data
      if (auto pLI = dyn_cast<LoadInst>(pU)) {
        doTaintPropagation(pLI);
      }
    }
  }
}

void AOSMarkTaintPass::doTaintPropagation(Value *pV) {
  if (visit_val_set.find(pV) != visit_val_set.end())
    return;

  visit_val_set.insert(pV);

	for (auto pU: pV->users()) {
		if (auto pI = dyn_cast<Operator>(pU)) {
			switch (pI->getOpcode()) {
				case Instruction::Invoke:
				case Instruction::Call:
				{
					Value *arg = getArgument(pU, pV);

					if (arg)
            doTaintPropagation(arg);

          // Handle especially string functions


          break;
        }
				case Instruction::Store:
				{
					auto pSI = dyn_cast<StoreInst>(pI);
          // Handle other node to taint

					if (pSI->getValueOperand() == pV) {
						auto ptrOp = pSI->getPointerOperand();

            if (AOSNode *node = value_map[ptrOp]) {
              handleAOSNode(node);
            } else {
              //pSI->dump();
              //assert(false);
            }
          }

          break;
        }
				case Instruction::Ret:
				{
					ReturnInst *pRI = dyn_cast<ReturnInst>(pI);

					if (pRI->getReturnValue() == pV) {
						for (auto pUb: pRI->getFunction()->users()) {
							if (Instruction *pIb = dyn_cast<Instruction>(pUb)) {
								Function *pF = pIb->getFunction();

								// To avoid the situation where CallInst doesn't use the return value
								if (pF && pIb->getType() == pRI->getReturnValue()->getType()) {
                  doTaintPropagation(pIb);
                }
              }
            }
          }
 
          break;
        }
        default:
        {
          doTaintPropagation(pI);

          break;
        }
      }
    }
  }
}

Value *AOSMarkTaintPass::getArgument(Value *pI, Value *pV) {
	Function *pF;

	if (InvokeInst *pII = dyn_cast<InvokeInst>(pI))
		pF = pII->getCalledFunction();
	else if (CallInst *pCI = dyn_cast<CallInst>(pI))
		pF = pCI->getCalledFunction();
	else
		assert(false);

	//TODO can intrinsic func return pointer alias?
	if (pF && !pF->isVarArg() && !pF->isDeclaration()) {
		unsigned arg_nth = 0;

		if (InvokeInst *pII = dyn_cast<InvokeInst>(pI)) {
			for (auto arg = pII->arg_begin(); arg != pII->arg_end(); ++arg) {
				if (dyn_cast<Value>(arg) == pV)
					break;

				arg_nth++;
			}

			assert(arg_nth < pII->arg_size());
		}	else if (CallInst *pCI = dyn_cast<CallInst>(pI)) {
			for (auto arg = pCI->arg_begin(); arg != pCI->arg_end(); ++arg) {
				if (dyn_cast<Value>(arg) == pV)
					break;

				arg_nth++;
			}

			assert(arg_nth < pCI->arg_size());
		}

		assert(!pF->isVarArg()); //TODO: handle variable number of arguments

		unsigned t = 0;
		for (auto arg = pF->arg_begin(); arg != pF->arg_end(); arg++) {
			if (t++ == arg_nth)
				return arg;
		}
	}

	return nullptr;
}


//void AOSMarkTaintPass::doTaintPropagation(AOSNode *node) {
//	if (node->isTainted())
//		return;
//
//	list<AOSNode *> node_list;
//  set<AOSNode *> visit_set;
//
//  node_list.push_back(node);
//
//	while (!node_list.empty()) {
//		node = node_list.front();
//		node_list.pop_front();
//
//		node->setTainted(true);
//
//		if (AOSNode *mem_user = node->mem_user) {
//			mem_user->setTainted(true);
//
//			for (auto it = mem_user->mem_edges.begin(); it != mem_user->mem_edges.end(); it++) {
//	      if (visit_set.find(*it) == visit_set.end()) {
//	        visit_set.insert(*it);
//					node_list.push_back(*it);
//				}
//			}
//		}
//	}
//}

void AOSMarkTaintPass::printNode(AOSNode *node) {
  errs() << "Print node!\n";
	for (auto it = node->aliases.begin(); it != node->aliases.end(); it ++) {
		it->first->dump();
	}
}
