lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:                    AArch64::SUBREG_TO_REG, dl, MVT::i64,
lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:        NegOpc = AArch64::SUBWrr;
lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:        NegOpc = AArch64::SUBXrr;
lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:        AArch64::SUBREG_TO_REG, DL, VT,
lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:  case AArch64::SUBSWri:
lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:  case AArch64::SUBSXri:
lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:  case AArch64::SUBWri:
lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:  case AArch64::SUBXri: {
lib/Target/AArch64/AArch64InstructionSelector.cpp:              TII.get(AArch64::SUBREG_TO_REG))
lib/Target/AArch64/AArch64InstructionSelector.cpp:            TII.get(AArch64::SUBREG_TO_REG))
lib/Target/AArch64/AArch64InstructionSelector.cpp:      BuildMI(MBB, I, I.getDebugLoc(), TII.get(AArch64::SUBREG_TO_REG))
lib/Target/AArch64/AArch64InstructionSelector.cpp:      BuildMI(MBB, I, I.getDebugLoc(), TII.get(AArch64::SUBREG_TO_REG))
lib/Target/AArch64/AArch64InstructionSelector.cpp:      CmpOpc = AArch64::SUBSWrr;
lib/Target/AArch64/AArch64InstructionSelector.cpp:      CmpOpc = AArch64::SUBSXrr;
lib/Target/AArch64/AArch64MacroFusion.cpp:  case AArch64::SUBSWri:
lib/Target/AArch64/AArch64MacroFusion.cpp:  case AArch64::SUBSWrr:
lib/Target/AArch64/AArch64MacroFusion.cpp:  case AArch64::SUBSXri:
lib/Target/AArch64/AArch64MacroFusion.cpp:  case AArch64::SUBSXrr:
lib/Target/AArch64/AArch64MacroFusion.cpp:  case AArch64::SUBSWrs:
lib/Target/AArch64/AArch64MacroFusion.cpp:  case AArch64::SUBSXrs:
lib/Target/AArch64/AArch64MacroFusion.cpp:  case AArch64::SUBWri:
lib/Target/AArch64/AArch64MacroFusion.cpp:  case AArch64::SUBWrr:
lib/Target/AArch64/AArch64MacroFusion.cpp:  case AArch64::SUBXri:
lib/Target/AArch64/AArch64MacroFusion.cpp:  case AArch64::SUBXrr:
lib/Target/AArch64/AArch64MacroFusion.cpp:  case AArch64::SUBWrs:
lib/Target/AArch64/AArch64MacroFusion.cpp:  case AArch64::SUBXrs:
lib/Target/AArch64/AArch64MacroFusion.cpp:      case AArch64::SUBSWrs:
lib/Target/AArch64/AArch64MacroFusion.cpp:      case AArch64::SUBSWrx:
lib/Target/AArch64/AArch64MacroFusion.cpp:      case AArch64::SUBSWrr:
lib/Target/AArch64/AArch64MacroFusion.cpp:      case AArch64::SUBSWri:
lib/Target/AArch64/AArch64MacroFusion.cpp:      case AArch64::SUBSXrs:
lib/Target/AArch64/AArch64MacroFusion.cpp:      case AArch64::SUBSXrx:
lib/Target/AArch64/AArch64MacroFusion.cpp:      case AArch64::SUBSXrx64:
lib/Target/AArch64/AArch64MacroFusion.cpp:      case AArch64::SUBSXrr:
lib/Target/AArch64/AArch64MacroFusion.cpp:      case AArch64::SUBSXri:
lib/Target/AArch64/AArch64MacroFusion.cpp:  case AArch64::SUBWrr:
lib/Target/AArch64/AArch64MacroFusion.cpp:  case AArch64::SUBXrr:
lib/Target/AArch64/AArch64MacroFusion.cpp:  case AArch64::SUBWrs:
lib/Target/AArch64/AArch64MacroFusion.cpp:  case AArch64::SUBXrs:
lib/Target/AArch64/AArch64MacroFusion.cpp:    case AArch64::SUBWrr:
lib/Target/AArch64/AArch64MacroFusion.cpp:    case AArch64::SUBXrr:
lib/Target/AArch64/AArch64MacroFusion.cpp:    case AArch64::SUBSWrr:
lib/Target/AArch64/AArch64MacroFusion.cpp:    case AArch64::SUBSXrr:
lib/Target/AArch64/AArch64MacroFusion.cpp:    case AArch64::SUBWrs:
lib/Target/AArch64/AArch64MacroFusion.cpp:    case AArch64::SUBXrs:
lib/Target/AArch64/AArch64MacroFusion.cpp:    case AArch64::SUBSWrs:
lib/Target/AArch64/AArch64MacroFusion.cpp:    case AArch64::SUBSXrs:
lib/Target/AArch64/AArch64MacroFusion.cpp:  case AArch64::SUBSWrr:
lib/Target/AArch64/AArch64MacroFusion.cpp:  case AArch64::SUBSXrr:
lib/Target/AArch64/AArch64MacroFusion.cpp:  case AArch64::SUBSWrs:
lib/Target/AArch64/AArch64MacroFusion.cpp:  case AArch64::SUBSXrs:
lib/Target/AArch64/AArch64MacroFusion.cpp:    case AArch64::SUBWrr:
lib/Target/AArch64/AArch64MacroFusion.cpp:    case AArch64::SUBXrr:
lib/Target/AArch64/AArch64MacroFusion.cpp:    case AArch64::SUBWrs:
lib/Target/AArch64/AArch64MacroFusion.cpp:    case AArch64::SUBXrs:
lib/Target/AArch64/AArch64FrameLowering.cpp:    BuildMI(MBB, MBBI, DL, TII->get(AArch64::SUBXrx64), AArch64::SP)
lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp:  case AArch64::SUBWrs:
lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp:  case AArch64::SUBSWrs:
lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp:  case AArch64::SUBXrs:
lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp:  case AArch64::SUBSXrs:
lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp:  case AArch64::SUBWrx:
lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp:  case AArch64::SUBSWrx:
lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp:  case AArch64::SUBXrx:
lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp:  case AArch64::SUBSXrx:
lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp:  case AArch64::SUBXrx64:
lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp:  case AArch64::SUBSXrx64:
lib/Target/AArch64/AArch64ConditionOptimizer.cpp:    case AArch64::SUBSWri:
lib/Target/AArch64/AArch64ConditionOptimizer.cpp:    case AArch64::SUBSXri:
lib/Target/AArch64/AArch64ConditionOptimizer.cpp:    case AArch64::SUBSWrr:
lib/Target/AArch64/AArch64ConditionOptimizer.cpp:    case AArch64::SUBSXrr:
lib/Target/AArch64/AArch64ConditionOptimizer.cpp:  case AArch64::ADDSWri: return AArch64::SUBSWri;
lib/Target/AArch64/AArch64ConditionOptimizer.cpp:  case AArch64::ADDSXri: return AArch64::SUBSXri;
lib/Target/AArch64/AArch64ConditionOptimizer.cpp:  case AArch64::SUBSWri: return AArch64::ADDSWri;
lib/Target/AArch64/AArch64ConditionOptimizer.cpp:  case AArch64::SUBSXri: return AArch64::ADDSXri;
Binary file lib/Target/AArch64/.AArch64FrameLowering.cpp.swp matches
lib/Target/AArch64/AArch64CondBrTuning.cpp:  case AArch64::SUBWri:
lib/Target/AArch64/AArch64CondBrTuning.cpp:  case AArch64::SUBWrr:
lib/Target/AArch64/AArch64CondBrTuning.cpp:  case AArch64::SUBWrs:
lib/Target/AArch64/AArch64CondBrTuning.cpp:  case AArch64::SUBWrx:
lib/Target/AArch64/AArch64CondBrTuning.cpp:  case AArch64::SUBSWri:
lib/Target/AArch64/AArch64CondBrTuning.cpp:  case AArch64::SUBSWrr:
lib/Target/AArch64/AArch64CondBrTuning.cpp:  case AArch64::SUBSWrs:
lib/Target/AArch64/AArch64CondBrTuning.cpp:  case AArch64::SUBSWrx:
lib/Target/AArch64/AArch64CondBrTuning.cpp:  case AArch64::SUBXri:
lib/Target/AArch64/AArch64CondBrTuning.cpp:  case AArch64::SUBXrr:
lib/Target/AArch64/AArch64CondBrTuning.cpp:  case AArch64::SUBXrs:
lib/Target/AArch64/AArch64CondBrTuning.cpp:  case AArch64::SUBXrx:
lib/Target/AArch64/AArch64CondBrTuning.cpp:  case AArch64::SUBSXri:
lib/Target/AArch64/AArch64CondBrTuning.cpp:  case AArch64::SUBSXrr:
lib/Target/AArch64/AArch64CondBrTuning.cpp:  case AArch64::SUBSXrs:
lib/Target/AArch64/AArch64CondBrTuning.cpp:  case AArch64::SUBSXrx:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSXrr:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSWrr:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBXrr:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBWrr: {
lib/Target/AArch64/AArch64InstrInfo.cpp:      BuildMI(MBB, I, DL, get(AArch64::SUBSXri), AArch64::XZR)
lib/Target/AArch64/AArch64InstrInfo.cpp:      BuildMI(MBB, I, DL, get(AArch64::SUBSWri), AArch64::WZR)
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBWri:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBXri:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBWrs:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSWrs: {
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBXrs:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSXrs: {
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBWrx:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBXrx:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBXrx64:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSWrx:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSXrx:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSXrx64: {
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSWrr:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSWrs:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSWrx:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSXrr:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSXrs:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSXrx:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSWri:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSXri:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSWrr:
lib/Target/AArch64/AArch64InstrInfo.cpp:    return AArch64::SUBWrr;
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSWri:
lib/Target/AArch64/AArch64InstrInfo.cpp:    return MIDefinesZeroReg ? AArch64::SUBSWri : AArch64::SUBWri;
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSWrs:
lib/Target/AArch64/AArch64InstrInfo.cpp:    return MIDefinesZeroReg ? AArch64::SUBSWrs : AArch64::SUBWrs;
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSWrx:
lib/Target/AArch64/AArch64InstrInfo.cpp:    return AArch64::SUBWrx;
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSXrr:
lib/Target/AArch64/AArch64InstrInfo.cpp:    return AArch64::SUBXrr;
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSXri:
lib/Target/AArch64/AArch64InstrInfo.cpp:    return MIDefinesZeroReg ? AArch64::SUBSXri : AArch64::SUBXri;
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSXrs:
lib/Target/AArch64/AArch64InstrInfo.cpp:    return MIDefinesZeroReg ? AArch64::SUBSXrs : AArch64::SUBXrs;
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSXrx:
lib/Target/AArch64/AArch64InstrInfo.cpp:    return AArch64::SUBXrx;
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSWrr:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSWri:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSXrr:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSXri:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBWrr:
lib/Target/AArch64/AArch64InstrInfo.cpp:    return AArch64::SUBSWrr;
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBWri:
lib/Target/AArch64/AArch64InstrInfo.cpp:    return AArch64::SUBSWri;
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBXrr:
lib/Target/AArch64/AArch64InstrInfo.cpp:    return AArch64::SUBSXrr;
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBXri:
lib/Target/AArch64/AArch64InstrInfo.cpp:    return AArch64::SUBSXri;
lib/Target/AArch64/AArch64InstrInfo.cpp:  return Opcode == AArch64::SUBSWri || Opcode == AArch64::SUBSXri;
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBWri:
lib/Target/AArch64/AArch64InstrInfo.cpp:    return AArch64::SUBSWri;
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBWrr:
lib/Target/AArch64/AArch64InstrInfo.cpp:    return AArch64::SUBSWrr;
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBWrs:
lib/Target/AArch64/AArch64InstrInfo.cpp:    return AArch64::SUBSWrs;
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBWrx:
lib/Target/AArch64/AArch64InstrInfo.cpp:    return AArch64::SUBSWrx;
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBXri:
lib/Target/AArch64/AArch64InstrInfo.cpp:    return AArch64::SUBSXri;
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBXrr:
lib/Target/AArch64/AArch64InstrInfo.cpp:    return AArch64::SUBSXrr;
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBXrs:
lib/Target/AArch64/AArch64InstrInfo.cpp:    return AArch64::SUBSXrs;
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBXrx:
lib/Target/AArch64/AArch64InstrInfo.cpp:    return AArch64::SUBSXrx;
lib/Target/AArch64/AArch64InstrInfo.cpp:    Opc = isSub ? AArch64::SUBSXri : AArch64::ADDSXri;
lib/Target/AArch64/AArch64InstrInfo.cpp:    Opc = isSub ? AArch64::SUBXri : AArch64::ADDXri;
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSWrr:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSXrr:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSWri:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSXri:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBWrr:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSWrr:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBWri:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSWri:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBXrr:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSXrr:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBXri:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBSXri:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBWrr:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBXrr:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBWri:
lib/Target/AArch64/AArch64InstrInfo.cpp:  case AArch64::SUBXri:
lib/Target/AArch64/AArch64InstrInfo.cpp:      SubOpc = AArch64::SUBWrr;
lib/Target/AArch64/AArch64InstrInfo.cpp:      SubOpc = AArch64::SUBXrr;
lib/Target/AArch64/AArch64SpeculationHardening.cpp:  BuildMI(MBB, MBBI, DebugLoc(), TII->get(AArch64::SUBSXri))
lib/Target/AArch64/AArch64FastISel.cpp:    { { AArch64::SUBWrr,  AArch64::SUBXrr  },
lib/Target/AArch64/AArch64FastISel.cpp:    { { AArch64::SUBSWrr, AArch64::SUBSXrr },
lib/Target/AArch64/AArch64FastISel.cpp:    { { AArch64::SUBWri,  AArch64::SUBXri  },
lib/Target/AArch64/AArch64FastISel.cpp:    { { AArch64::SUBSWri, AArch64::SUBSXri },
lib/Target/AArch64/AArch64FastISel.cpp:    { { AArch64::SUBWrs,  AArch64::SUBXrs  },
lib/Target/AArch64/AArch64FastISel.cpp:    { { AArch64::SUBSWrs, AArch64::SUBSXrs },
lib/Target/AArch64/AArch64FastISel.cpp:    { { AArch64::SUBWrx,  AArch64::SUBXrx  },
lib/Target/AArch64/AArch64FastISel.cpp:    { { AArch64::SUBSWrx, AArch64::SUBSXrx },
lib/Target/AArch64/AArch64FastISel.cpp:            TII.get(AArch64::SUBREG_TO_REG), Reg64)
lib/Target/AArch64/AArch64FastISel.cpp:              TII.get(AArch64::SUBREG_TO_REG), Reg64)
lib/Target/AArch64/AArch64FastISel.cpp:            TII.get(AArch64::SUBREG_TO_REG), TmpReg)
lib/Target/AArch64/AArch64FastISel.cpp:            TII.get(AArch64::SUBREG_TO_REG), TmpReg)
lib/Target/AArch64/AArch64FastISel.cpp:            TII.get(AArch64::SUBREG_TO_REG), TmpReg)
lib/Target/AArch64/AArch64FastISel.cpp:            TII.get(AArch64::SUBREG_TO_REG), Src64)
lib/Target/AArch64/AArch64FastISel.cpp:            TII.get(AArch64::SUBREG_TO_REG), Reg64)
lib/Target/AArch64/AArch64FastISel.cpp:                TII.get(AArch64::SUBREG_TO_REG), ResultReg)
lib/Target/AArch64/AArch64FastISel.cpp:    CmpOpc = AArch64::SUBSWrs;
lib/Target/AArch64/AArch64FastISel.cpp:    CmpOpc = AArch64::SUBSXrs;
lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:  BuildMI(LoadCmpBB, DL, TII->get(AArch64::SUBSXrs), AArch64::XZR)
lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:  BuildMI(LoadCmpBB, DL, TII->get(AArch64::SUBSXrs), AArch64::XZR)
lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:  case AArch64::SUBWrr:
lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:  case AArch64::SUBXrr:
lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:  case AArch64::SUBSWrr:
lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:  case AArch64::SUBSXrr:
lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:    case AArch64::SUBWrr:      Opcode = AArch64::SUBWrs; break;
lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:    case AArch64::SUBXrr:      Opcode = AArch64::SUBXrs; break;
lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:    case AArch64::SUBSWrr:     Opcode = AArch64::SUBSWrs; break;
lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:    case AArch64::SUBSXrr:     Opcode = AArch64::SUBSXrs; break;
lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:                          AArch64::SUBSWrx,
lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:                          AArch64::SUBSWrx,
lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:                          AArch64::SUBSWrs,
lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:                          AArch64::LDAXRX, AArch64::STLXRX, AArch64::SUBSXrs,
lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp:  case AArch64::SUBXrr:
lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp:    return AArch64::SUBv1i64;
lib/Target/AArch64/AArch64RedundantCopyElimination.cpp:    case AArch64::SUBSWri:
lib/Target/AArch64/AArch64RedundantCopyElimination.cpp:    case AArch64::SUBSXri: {
lib/Target/AArch64/AArch64RedundantCopyElimination.cpp:    case AArch64::SUBSWrr:
lib/Target/AArch64/AArch64RedundantCopyElimination.cpp:    case AArch64::SUBSWrs:
lib/Target/AArch64/AArch64RedundantCopyElimination.cpp:    case AArch64::SUBSWrx:
lib/Target/AArch64/AArch64RedundantCopyElimination.cpp:    case AArch64::SUBSXrr:
lib/Target/AArch64/AArch64RedundantCopyElimination.cpp:    case AArch64::SUBSXrs:
lib/Target/AArch64/AArch64RedundantCopyElimination.cpp:    case AArch64::SUBSXrx:
lib/Target/AArch64/AArch64RedundantCopyElimination.cpp:    case AArch64::SUBSXrx64: {
lib/Target/AArch64/AArch64AOS/AOSFrameLowering.cpp:    BuildMI(MBB, MI, MI->getDebugLoc(), TII->get(AArch64::SUBWrs), AArch64::X1)
lib/Target/AArch64/AArch64AOS/AOSFrameLowering.cpp:    BuildMI(&MBB, DebugLoc(), TII->get(AArch64::SUBWrs), AArch64::X1)
Binary file lib/Target/AArch64/AArch64AOS/.AOSFrameLowering.cpp.swp matches
lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp:          Update->getOpcode() == AArch64::SUBXri) &&
lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp:  if (Update->getOpcode() == AArch64::SUBXri)
lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp:  case AArch64::SUBXri:
lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp:    if (MI.getOpcode() == AArch64::SUBXri)
lib/Target/AArch64/AArch64ConditionalCompares.cpp:    case AArch64::SUBSWri:
lib/Target/AArch64/AArch64ConditionalCompares.cpp:    case AArch64::SUBSXri:
lib/Target/AArch64/AArch64ConditionalCompares.cpp:    case AArch64::SUBSWrr:
lib/Target/AArch64/AArch64ConditionalCompares.cpp:    case AArch64::SUBSXrr:
lib/Target/AArch64/AArch64ConditionalCompares.cpp:      Opc = AArch64::SUBSWri;
lib/Target/AArch64/AArch64ConditionalCompares.cpp:      Opc = AArch64::SUBSXri;
lib/Target/AArch64/AArch64ConditionalCompares.cpp:  case AArch64::SUBSWri:    Opc = AArch64::CCMPWi; break;
lib/Target/AArch64/AArch64ConditionalCompares.cpp:  case AArch64::SUBSWrr:    Opc = AArch64::CCMPWr; break;
lib/Target/AArch64/AArch64ConditionalCompares.cpp:  case AArch64::SUBSXri:    Opc = AArch64::CCMPXi; break;
lib/Target/AArch64/AArch64ConditionalCompares.cpp:  case AArch64::SUBSXrr:    Opc = AArch64::CCMPXr; break;
